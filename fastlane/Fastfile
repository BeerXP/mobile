# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
update_fastlane

# this should be the folder name under `ios` for your project
project_name = 'BeerXP'

ENV["CRASHLYTICS_API_TOKEN"] = "123abc"
ENV["CRASHLYTICS_BUILD_SECRET"] = "secret_key"
ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"

before_all do
#  update_fastlane
  yarn(
      command: "install",
      package_path: "./package.json"
  )
#    ensure_git_branch
#    ensure_git_status_clean
#    git_pull
end

platform :ios do
  # iOS Lanes
  ENV["GYM_PROJECT"] = "./ios/BeerXP.xcodeproj"

  lane :clean do
    clean_build_artifacts
    clear_derived_data
    gym(clean: true, scheme: 'BeerXP', project: './ios/BeerXP.xcodeproj', export_xcargs: "-allowProvisioningUpdates")
    # xcclean (project: "ios/BeerXP.xcodeproj")
  end

  lane :tests do
    notification(subtitle: "Testing", message: "Executando testes")

    # https://docs.fastlane.tools/actions/scan/
    scan(
      clean:true, 
      project: "ios/BeerXP.xcodeproj", scheme: "BeerXP", devices: ["iPhone X", "iPhone 6s"],
      slack_url: "https://hooks.slack.com/services/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", 
      slack_channel: "#ios_build"
    )

    notification(subtitle: "Finished", message: "Executado")
  end

  desc 'Build the iOS application.'
  private_lane :build do
    # certificates
    # increment_build_number(xcodeproj: './ios/BeerXP.xcodeproj')
    gym(scheme: 'BeerXP', project: './ios/BeerXP.xcodeproj', export_xcargs: "-allowProvisioningUpdates")
  end

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
    match(app_identifier: 'com.thebeerxp.mobile.ios.BeerXP', type: 'development', readonly: true)
    match(app_identifier: 'com.thebeerxp.mobile.ios.BeerXP', type: 'appstore', readonly: true)
  end

  desc 'Ship to Testflight.'
  lane :beta do
    build
    # pilot
    # commit_version_bump(message: 'Bump build', xcodeproj: './ios/name.xcodeproj')
    # push_to_git_remote
  end

end

platform :android do
  # Android Lanes
  before_all do
    ANDROID_VERSION_NAME = get_version_name(
            gradle_file_path:"android/app/build.gradle",
            ext_constant_name:"versionName"
    )
    ANDROID_VERSION_CODE = get_version_code(
        gradle_file_path:"android/app/build.gradle",
        ext_constant_name:"versionCode"
    )
  end

  desc "Runs all the tests"
  lane :tests do
    notification(subtitle: "Testing", message: "Executando testes")
    gradle(task: 'test', project_dir: 'android/')
  end

  desc 'Build the Android application.'
  private_lane :build do
    gradle(task: 'clean', project_dir: 'android/')
    gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/')
  end

  lane :debug do
    gradle(   
      task: "assemble",   
      build_type: "Debug",   
      print_command: false
    )
  end

  desc "Deploy a new alpha version to the Google Play Store"
  lane :alpha do
    # Generate the changelog based on commit messages since your last tag
    # changelog_from_git_commits

    # Adjust the 'build_type' and 'flavor' params as needed to build the right APK for your setup
    gradle(
      task: 'assemble',
      build_type: 'Release',
      project_dir: 'android/'
    )
    add_badge(
      alpha: true,
      shield: "Version-#{ANDROID_VERSION_NAME}-blue",
      dark: true,
      glob: "/android/app/src/main/res/mipmap-*/ic_launcher.png",
      shield_scale: "0.75"
    )
    # supply(
    #   track: "alpha",
    #   apk: "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
    # )
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    # Generate the changelog based on commit messages since your last tag
    # changelog_from_git_commits

    # Adjust the 'build_type' and 'flavor' params as needed to build the right APK for your setup
    gradle(
      task: 'assemble',
      build_type: 'Release',
      project_dir: 'android/'#,
      # properties: {
      #   'android.useDeprecatedNdk' => true,
      #   'android.injected.signing.store.file' => 'app/rn-sample-key.keystore',
      #   'android.injected.signing.store.password' => ENV["RNSAMPLE_RELEASE_STORE_PASSWORD"],
      #   'android.injected.signing.key.alias'=> ENV["RNSAMPLE_RELEASE_KEY_ALIAS"],
      #   'android.injected.signing.key.password' => ENV["RNSAMPLE_RELEASE_KEY_PASSWORD"]
      # }
    )

    # crashlytics(
    #   api_token: '[apiToken]',
    #   build_secret: '[build_secret]',
    #   emails: emails,
    #   groups: groups,
    #   debug: true,
    #   notes: 'Distributed with fastlane', # Check out the changelog_from_git_commits action
    #   notifications: true  # Should this distribution notify your testers via email?
    # )

    add_badge(
      beta: true,
      shield: "Version-#{ANDROID_VERSION_NAME}-blue",
      dark: true,
      glob: "/android/app/src/main/res/mipmap-*/ic_launcher.png",
      shield_scale: "0.75"
    )
  end
end

desc "Upload the APK to Slack channel"
private_lane :upload_to_slack do |options|
  file_path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  file_name = file_path.gsub(/\/.*\//,"")
  sh "echo Uploading " + file_name + " to Slack"
  sh "curl https://slack.com/api/files.upload -F token=\"xoxp-169743071077-169684263492-469173104320-4ec3bfe81efee657cd5931ec31e8395a\" -F channels=\"#android_" + (options[:build] ? options[:build] : "build") + "\" -F title=\"" + file_name + "\" -F filename=\"" + file_name + "\" -F file=@" + file_path
end

lane :slackbuild do |options|
  gradle(task: 'clean', project_dir: 'android/')
  gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/')
  upload_to_slack options[:build]
  slack(message: "Build Successful!", channel: "#android_"+(options[:build] ? options[:build] : "build"))
end